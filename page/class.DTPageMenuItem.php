<?php
/**
 * @package steroid\area
 */

require_once STROOT . '/datatype/class.BaseDTForeignReference.php';

require_once STROOT . '/menu/class.RCMenu.php';
require_once STROOT . '/datatype/class.DTSteroidLive.php';

/**
 * Class for DT in RCPage, used for editing a page's menu items
 *
 * @package steroid\page
 */
class DTPageMenuItem extends BaseDTForeignReference {
	public static function getFieldDefinition() {
		return array(
			'dataType' => get_called_class(),
			'nullable' => true,
			'requireSelf' => true,
			'constraints' => array( 'min' => 0 )
		);
	}

	protected function fillExistingMenuItems( &$values ) {
		foreach ( $values as &$menuItemValues ) {
			$menuItem = $this->storage->selectFirstRecord( 'RCMenuItem', array(
				'fields' => array(
					'menu.domainGroup'
				),
				'where' => array(
					Record::FIELDNAME_PRIMARY,
					'=',
					array( $menuItemValues[ Record::FIELDNAME_PRIMARY ] )
				)
			) );

			$itemTitle = $menuItem->getTitle();
			$itemDomainGroupValues = $menuItem->menu->domainGroup->getValues();

			$menuItemValues[ '_title' ] = '';

			if ( $menuItem->menu->domainGroup !== $this->record->domainGroup ) {
				$menuItemValues[ '_title' ] = $menuItem->menu->domainGroup->getTitle() . ' -> ';
			}

			$parentTitleChain = '';

			while ( $menuItem->parent ) {
				$parentTitleChain .= $menuItem->parent->getTitle() . ' -> ';
				$menuItem = $menuItem->parent;
			}

			$menuItemValues[ '_title' ] .= $parentTitleChain . $itemTitle;

			$menuItemValues[ 'domainGroup' ] = $itemDomainGroupValues;
		}

		unset( $menuItemValues );
	}

	protected static function getAvailableMenus( RBStorage $storage, RCDomainGroup $domainGroup ) {
		$menus = array();

		$availableMenus = $storage->selectRecords( 'RCMenu', array(
			'fields' => array( '*' ),
			'where' => array(
				RCMenu::getDataTypeFieldName( 'DTSteroidDomainGroup' ),
				'=',
				array( $domainGroup ),
				'AND',
				RCMenu::getDataTypeFieldName( 'DTSteroidLive' ),
				'=',
				array( DTSteroidLive::LIVE_STATUS_PREVIEW )
			)
		) );

		foreach ( $availableMenus as $menu ) {
			$menus[ ] = $menu->getFormValues( array() );
		}

		return $menus;
	}

	public function getFormValue() {
		$values = array(
			'menuItems' => parent::getFormValue(),
			'availableMenus' => $this->getAvailableMenus( $this->storage, $this->record->domainGroup )
		);

		if ( $values[ 'menuItems' ] ) {
			$this->fillExistingMenuItems( $values[ 'menuItems' ] );
		} else {
			$values[ 'menuItems' ] = array();
		}

		$values[ 'menuItems' ] = array_merge( $values[ 'menuItems' ], self::getAutoGeneratedMenuItems( $this->storage, $values, $this->record->parent, $this->record ) );

		return $values;
	}

	protected static function getAutoGeneratedMenuItems( RBStorage $storage, $values, $parent = NULL, $existingPage = NULL ) {
		$where = array( 'live', '=', array( DTSteroidLive::LIVE_STATUS_PREVIEW ), 'AND', '(', '(', 'page', '=', array( $parent ), 'AND', 'subItemsFromPage', '=', array( 1 ), ')' );

		if ( $existingPage && $existingPage->pageType !== 'RCPage' ) {
			array_push( $where, 'OR', '(', 'pagesFromRecordClass', '=', array( $existingPage->pageType ), 'AND', 'menu.domainGroup', '=', array( $existingPage->domainGroup ), ')' );
		}

		$where[ ] = ')';

		$parentMenuItems = $storage->selectRecords( 'RCMenuItem', array( 'where' => $where ) );

		$autoGenerated = array();

		if ( $parentMenuItems ) {
			foreach ( $parentMenuItems as $parentMenuItem ) {
				if(isset($values['menuItems'])){
					foreach ( $values[ 'menuItems' ] as $menuItem ) {
						if ( $menuItem[ 'parent' ][ Record::FIELDNAME_PRIMARY ] == $parentMenuItem->{Record::FIELDNAME_PRIMARY} ) {
							continue 2; // skip generating menuItem if there's a user defined menuItem with the same parent
						}
					}
				}

				$val = array(
					'menu' => $parentMenuItem->menu->getFormValues( array() ),
					'parent' => $parentMenuItem->getFormValues( array() ),
					'language' => $parentMenuItem->menu->language->getFormValues( array() ),
					'showInMenu' => true,
					'page' => $existingPage ? $existingPage->getFormValues( array() ) : NULL,
					'title' => '',
					'sorting' => 0 // TODO: generate sorting?
				);

				$val[ '_autoGenerated' ] = true;

				$parentTitleChain = '';

				$parentMI = $parentMenuItem;

				do {
					$parentTitleChain .= $parentMI->getTitle() . ' -> ';

					if ( $parentMI->parent ) {
						$parentMI = $parentMI->parent;
					} else {
						$parentMI = NULL;
					}
				} while ( $parentMI );

				$val[ '_title' ] = $parentTitleChain . ( $existingPage ? $existingPage->getTitle() : NULL );

				$autoGenerated[ ] = $val;
			}
		}

		return $autoGenerated;
	}

	public static function getDefaultValue( IStorage $storage, $fieldName = NULL, array $fieldConf = NULL, array $extraParams = NULL ) {
		if ( !isset( $extraParams[ 'parent' ] ) || empty( $extraParams[ 'parent' ] ) || !isset( $extraParams[ 'domainGroup' ] ) || empty( $extraParams[ 'domainGroup' ] ) ) {
			return parent::getDefaultValue( $storage, $fieldName, $fieldConf, $extraParams );
		}

		if ( is_object( $extraParams[ 'parent' ] ) ) {
			$parent = $extraParams[ 'parent' ];
		} else {
			$parent = RCPage::get( $storage, array(
				Record::FIELDNAME_PRIMARY => $extraParams[ 'parent' ]
			), Record::TRY_TO_LOAD );
		}

		if ( !$parent->exists() ) {
			return parent::getDefaultValue( $storage, $fieldName, $fieldConf, $extraParams );
		}

		if ( is_object( $extraParams[ 'domainGroup' ] ) ) {
			$domainGroup = $extraParams[ 'domainGroup' ];
		} else {
			$domainGroup = RCDomainGroup::get( $storage, array( Record::FIELDNAME_PRIMARY => $extraParams[ 'domainGroup' ] ), Record::TRY_TO_LOAD );
		}

		if ( !$domainGroup->exists() ) {
			return parent::getDefaultValue( $storage, $fieldName, $fieldConf, $extraParams );
		}

		$values = array(
			'menuItems' => array_merge( array(), self::getAutoGeneratedMenuItems( $storage, array(), $parent ) ),
			'availableMenus' => self::getAvailableMenus( $storage, $domainGroup )
		);

		return $values;
	}

	protected function getForeignFormFields( $recordClass = NULL ) {
		if ( !$recordClass ) {
			throw new InvalidArgumentException( '$recordClass must be set' );
		}

		return array_diff( array_keys( $recordClass::getAllFieldDefinitions() ), array( 'parent:RCMenuItem' ) );
	}
}
