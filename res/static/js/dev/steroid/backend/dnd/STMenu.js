define([
	"dojo/_base/declare",
	"dijit/layout/ContentPane",
	"steroid/backend/dnd/PageMenuItem",
	"dojo/_base/lang",
	"dojo/_base/array",
	"dojo/i18n!steroid/backend/nls/Menu"
], function (declare, ContentPane, PageMenuItem, lang, array, i18nMenu) {

	return declare([ContentPane], {
		record: null,
		menuItems: null,
		backend: null,
		mainClassConfig: null,
		baseTitle: null,
		owningContainer: null,

		constructor: function () {
			var me = this;

			me.menuItems = [];
		},
		postMixInProperties: function () {
			var me = this;

			me.inherited(arguments);

			me.baseTitle = me.title;
		},
		addMenuItem: function (menuItemValues, idx, autoGenerated, readOnly) {
			var me = this;

			var menuItemClassConfig = lang.clone(me.backend.getClassConfigFromClassName('RCMenuItem'));

			var menuItem = new PageMenuItem({
				title: (menuItemValues._title || menuItemValues.title || menuItemValues.page._title) + (autoGenerated ? ' (' + i18nMenu.generated + ')' : ''),
				backend: me.backend,
				mainClassConfig: me.mainClassConfig,
				ownClassConfig: menuItemClassConfig,
				open: false,
				submitName: me.submitName + '[' + idx + ']',
				notDisableFields: ['primary'],
				generated: !!autoGenerated,
				owningContainer: me,
				readOnly: readOnly
			});

			menuItem.set('value', menuItemValues);

			menuItem.startup();

			me.menuItems.push(menuItem);

			me.containerNode.appendChild(menuItem.domNode);

			if (readOnly) {
				menuItem.set('readOnly', true);
			}

			me.updateTitle();

			return menuItem;
		},
		updateTitle: function () {
			var me = this;

			me.set('title', me.baseTitle + ' (' + me.menuItems.length + ')');
		},
		removeItem: function (item) {
			var me = this;

			var idx = array.indexOf(me.menuItems, item);

			if (idx !== -1) {
				me.menuItems.splice(idx, 1);
			}

			me.owningContainer.removeItem(item);

			me.updateTitle();
		},
		_setValueAttr: function (value) {
			var me = this;

			me.record = value;

			me.inherited(arguments);
		},
		getDirtyNess: function () {
			var me = this;

			var dirtyNess = 0;

			for (var i = 0, item; item = me.menuItems[i]; i++) {
				dirtyNess += item.getDirtyNess();
			}

			return dirtyNess;
		},
		destroy: function () {
			var me = this;

			for (var i = 0, item; item = me.menuItems[i]; i++) {
				item.destroyRecursive();
			}

			delete me.menuItems;

			delete me.record;

			me.inherited(arguments);
		}
	});
});