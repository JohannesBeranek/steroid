define([
	"dojo/_base/declare",
	"dijit/layout/TabContainer",
	"steroid/backend/datatype/form/_DTFormFieldMixin",
	"steroid/backend/dnd/STMenu",
	"dojo/i18n!steroid/backend/nls/RecordClasses",
	"dojo/_base/lang",
	"dojox/lang/functional",
	"dojo/dom-construct",
	"dojo/dom-attr",
	"dojo/_base/array"
], function (declare, TabContainer, _DTFormFieldMixin, STMenu, i18nRC, lang, langFunc, domConstruct, domAttr, array) {

	return declare([TabContainer, _DTFormFieldMixin], {
		menus: null,
		style: "width: 100%;min-width: 500px;",
		doLayout: false,
		valueWatches: null,
		menuItems: null,
		emptySubmitNode: null,

		constructor: function () {
			var me = this;

			me.menus = [];
			me.valueWatches = [];
			me.menuItems = [];
		},
		getLabel: function () {
			var me = this;

			return i18nRC.RCPage['page:RCMenuItem'];
		},
		startup: function () {
			var me = this;

			me.inherited(arguments);

			me.initComplete();
		},
		setSubmitName: function (setName) {
			var me = this;

			var hasNonGenerated = false;

			if (me.menuItems && me.menuItems.length) {
				for (var i = 0, item; item = me.menuItems[i]; i++) {
					if ((!item.generated || item.userChange)) {
						hasNonGenerated = true;
					}

					item.setSubmitName(setName);
				}
			}

			if ((hasNonGenerated && me.emptySubmitNode) // menuItem will submit
				|| (me.emptySubmitNode && !setName)) { // nothing should submit
				domConstruct.destroy(me.emptySubmitNode);
				delete me.emptySubmitNode;
			}

			if (me.originalValue && !hasNonGenerated && setName && !me.emptySubmitNode) { // need to submit empty
				var inputName = 'page:RCMenuItem';

				if (me.mainClassConfig.className != 'RCPage') {
					inputName = 'page[' + inputName + ']';
				}

				inputName += '[]';

				me.emptySubmitNode = domConstruct.create('input', {name: inputName, value: '', type: 'hidden'});
				domConstruct.place(me.emptySubmitNode, me.containerNode);
			}
		},
		removeItem: function (item) {
			var me = this;

			var idx = array.indexOf(me.menuItems, item);

			if (idx !== -1) {
				me.menuItems.splice(idx, 1);
				me.valueWatches[idx].unwatch();
				me.valueChange();
			}
		},
		_setValueAttr: function (value) {
			var me = this;

			if (!value) {
				// TODO: should actually (if new record) be default menuItems
				me.inherited(arguments);
			} else {
				var totalItems = langFunc.keys(value['menuItems']).length;

				for (var i in value['availableMenus']) {
					var menu = null;

					for (var j = 0, item; item = me.menus[j]; j++) {
						if (item.record.primary == value['availableMenus'][i].primary) {
							menu = item;
							break;
						}
					}

					if (!menu) {
						menu = me.addMenu(value['availableMenus'][i]);
						me.menus.push(menu);
					}
				}

				if (!totalItems) {
					me.valueComplete();
				}

				var checkValueComplete = function () {
					totalItems--;

					if (!totalItems) {
						me.valueComplete();

						me.set('STValue', me.STSetValue(menuItems));

						me.layout();
					}
				};

				var menuItems = lang.clone(value['menuItems']);

				for (var j = 0, menu; menu = me.menus[j]; j++) {
					for (var i in value['menuItems']) {
						if (menu.record.primary == value['menuItems'][i].menu.primary) {
							var menuItem = menu.addMenuItem(value['menuItems'][i], me.menuItems.length, value['menuItems'][i]._autoGenerated, false);

							me.valueWatches.push(menuItem.watch('STValue', function (name, oldValue, newValue) {
								me.valueChange();
							}));

							menuItem.addValueSetListenerOnce(checkValueComplete);

							me.menuItems.push(menuItem);

							delete value['menuItems'][i];
						}
					}
				}

				if (langFunc.keys(value['menuItems']).length) { // remaining menuItems from foreign domainGroups
					var foreignMenu = me.addMenu({
						primary: null,
						title: i18nRC.RCMenu.foreignDomainGroupMenuItemReference
					});

					me.menus.push(foreignMenu);

					for (var i in value['menuItems']) {
						var menuItem = foreignMenu.addMenuItem(value['menuItems'][i], me.menuItems.length, value['menuItems'][i]._autoGenerated, true);

						menuItem.addValueSetListenerOnce(checkValueComplete);

						me.menuItems.push(menuItem);
					}
				}
			}
		},
		valueChange: function () {
			var me = this;

			var value = {};

			for (var i = 0, item; item = me.menuItems[i]; i++) {
				value[i] = item.get('value');
			}

			me.set('STValue', me.STSetValue(value));
		},
		addMenu: function (menuRecord) {
			var me = this;

			var menu = new STMenu({
				title: menuRecord.title,
				backend: me.backend,
				mainClassConfig: me.mainClassConfig,
				submitName: me.submitName,
				owningContainer: me
			});

			menu.set('value', menuRecord);

			menu.startup();

			me.addChild(menu);

			return menu;
		},
		getDirtyNess: function () {
			var me = this;

			return me.originalValue != me.STValue;
		},
		reset: function () {
			var me = this;

			me.menuItems = [];

			if (me.menus && me.menus.length) {
				for (var i = 0, item; item = me.menus[i]; i++) {
					me.removeChild(item);
					item.destroyRecursive();
				}
			}

			me.menus = [];

			if (me.valueWatches && me.valueWatches.length) {
				for (var i = 0, item; item = me.valueWatches[i]; i++) {
					item.unwatch();
				}

				me.valueWatches = [];
			}

			me.inherited(arguments);
		},
		destroy: function () {
			var me = this;

			delete me.menuItems;

			if (me.valueWatches && me.valueWatches.length) {
				for (var i = 0, item; item = me.valueWatches[i]; i++) {
					item.unwatch();
				}

				delete me.valueWatches;
			}

			if (me.menus && me.menus.length) {
				for (var i = 0, item; item = me.menus[i]; i++) {
					item.destroyRecursive();
				}
			}

			delete me.menus;

			if (me.emptySubmitNode) {
				domConstruct.destroy(me.emptySubmitNode);
				delete me.emptySubmitNode;
			}

			me.inherited(arguments);
		}
	});
});
